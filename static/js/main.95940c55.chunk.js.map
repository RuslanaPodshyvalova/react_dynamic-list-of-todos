{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filter","status","hangleFilter","event","setState","target","value","handleExecutionStatus","this","props","updateUser","todos","searchPhrase","toLocaleLowerCase","filteredTodos","title","includes","todo","completed","className","type","id","name","placeholder","onChange","map","item","key","classnames","TodoList__item","readOnly","defaultChecked","button","onClick","userId","React","Component","defaultProps","getData","url","fetch","then","response","ok","json","Error","statusText","data","getUser","CurrentUser","user","errorMessage","a","currentUser","prevProps","clearUser","email","phone","App","selectedUserId","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95940c55.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    filter: '',\n    status: '',\n  }\n\n  hangleFilter = (event) => {\n    this.setState({ filter: event.target.value });\n  }\n\n  handleExecutionStatus = (event) => {\n    this.setState({ status: event.target.value });\n  }\n\n  render() {\n    const { updateUser, todos } = this.props;\n    const { filter, status } = this.state;\n    const searchPhrase = filter.toLocaleLowerCase();\n    const statusOptions = ['all', 'active', 'completed'];\n\n    let filteredTodos = todos.filter(({ title }) => (\n      title?.toLocaleLowerCase().includes(searchPhrase)\n    ));\n\n    if (status) {\n      switch (status) {\n        case 'active':\n          filteredTodos = todos.filter(todo => todo.completed !== true);\n          break;\n        case 'completed':\n          filteredTodos = todos.filter(todo => todo.completed === true);\n          break;\n        default:\n          filteredTodos = todos;\n          break;\n      }\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div>\n          <input\n            type=\"text\"\n            id=\"filter\"\n            className=\"filter-field\"\n            name=\"filter\"\n            placeholder=\"filter by title\"\n            value={filter}\n            onChange={this.hangleFilter}\n          />\n        </div>\n        <div>\n          <select\n            id=\"status\"\n            className=\"filter-field\"\n            value={status}\n            onChange={this.handleExecutionStatus}\n          >\n            <option>select status for todos</option>\n            {statusOptions.map(item => (\n              <option\n                key={item}\n                value={item}\n              >\n                {item}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    defaultChecked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classnames({\n                    button: true,\n                    'TodoList__user-button': true,\n                    'TodoList__user-button--selected': !todo.completed,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    if (todo.userId) {\n                      updateUser(todo.userId);\n                    }\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })),\n  updateUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\n// eslint-disable-next-line\nconst getData = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.status}: ${response.statusText}`);\n    })\n    .then(response => response.data);\n};\n\nexport const getTodos = () => getData('/todos');\nexport const getUser = id => getData(`/users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n    errorMessage: '',\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    if (userId > 0) {\n      this.getUser(userId);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId !== userId) {\n      this.getUser(userId);\n    }\n  }\n\n  getUser = async(id) => {\n    try {\n      const currentUser = await getUser(id);\n\n      this.setState({ user: currentUser });\n    } catch (error) {\n      this.setState({ errorMessage: error });\n    }\n  }\n\n  render() {\n    const { user, errorMessage } = this.state;\n    const { userId, clearUser } = this.props;\n\n    if (!user) {\n      return null;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          {!errorMessage ? user && (\n            <span>\n              Selected user:\n              {userId}\n            </span>\n          ) : (\n            <p className=\"error\">{errorMessage}</p>\n          )}\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"button CurrentUser__clear\"\n          onClick={() => clearUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n  clearUser: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  userId: 0,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    errorMessage: '',\n  };\n\n  async componentDidMount() {\n    try {\n      const todosFromServer = await getTodos();\n\n      this.setState({ todos: todosFromServer });\n    } catch (error) {\n      this.setState({ errorMessage: `Can't load todos` });\n    }\n  }\n\n  updateUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage ? todos && (\n            <TodoList todos={todos} updateUser={this.updateUser} />\n          ) : (\n            <p className=\"error\">{errorMessage}</p>\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId > 0 ? (\n              <CurrentUser userId={selectedUserId} clearUser={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}